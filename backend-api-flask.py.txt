    # Importar las librerías necesarias
    from flask import Flask, request, jsonify
    from flask_cors import CORS # Para permitir solicitudes desde tu frontend HTML/JS

    # Inicializar la aplicación Flask
    app = Flask(__name__)
    # Habilitar CORS para permitir que tu frontend (que está en un dominio diferente)
    # pueda hacer solicitudes a esta API. En producción, deberías restringir esto a tu dominio.
    CORS(app)

    # Simulación de la base de datos: una lista en memoria para almacenar las alertas
    # En un entorno real, esto sería una base de datos como PostgreSQL, MongoDB, Firestore, etc.
    alerts_database = []
    next_alert_id = 1 # Para asignar IDs únicos a las alertas

    # Endpoint para recibir nuevas alertas (desde Make.com)
    # Método: POST
    # Ruta: /api/alerts
    @app.route('/api/alerts', methods=['POST'])
    def receive_alert():
        global next_alert_id
        # Verificar que la solicitud sea JSON
        if not request.is_json:
            return jsonify({"error": "Request must be JSON"}), 400

        # Obtener los datos de la alerta del cuerpo de la solicitud
        alert_data = request.get_json()

        # Validar que los campos esenciales estén presentes
        required_fields = ['type', 'title', 'message', 'productCode', 'productLine', 'country']
        if not all(field in alert_data for field in required_fields):
            return jsonify({"error": "Missing required alert fields"}), 400

        # Añadir un ID y una marca de tiempo a la alerta
        alert_data['id'] = next_alert_id
        alert_data['timestamp'] = request.date.isoformat() # Obtener la fecha y hora de la solicitud
        next_alert_id += 1

        # Almacenar la alerta en nuestra 'base de datos' en memoria
        alerts_database.append(alert_data)

        # Imprimir la alerta recibida en la consola del servidor (para depuración)
        print(f"Alerta recibida y almacenada: {alert_data}")

        # Responder con un mensaje de éxito
        return jsonify({"message": "Alert received successfully", "alert_id": alert_data['id']}), 201

    # Endpoint para obtener todas las alertas (para tu prototipo HTML/JS)
    # Método: GET
    # Ruta: /api/alerts
    @app.route('/api/alerts', methods=['GET'])
    def get_alerts():
        # Devolver todas las alertas almacenadas en la 'base de datos'
        # Las alertas se devuelven en orden inverso para mostrar las más recientes primero
        return jsonify(alerts_database[::-1]), 200

    # Punto de entrada principal para ejecutar la aplicación Flask
    if __name__ == '__main__':
        # Ejecutar la aplicación en modo depuración (útil para desarrollo)
        # En producción, usarías un servidor WSGI como Gunicorn o uWSGI
        app.run(debug=True, port=5000) # Se ejecutará en http://127.0.0.1:5000
    